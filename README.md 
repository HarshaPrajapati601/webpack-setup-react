```npm init -y```

1. Install Core and JavasScipt Loaders
`npm install --save-dev @babel/core babel-loader @babel/preset-env @babel/preset-react`

Babel is a third party library that is used to convert ECMAScript 2015+ code into a backward-compatible version of JavaScript in current and older browsers or environments.
babel/core: The core babel library
babel/preset-env: Is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment(s)This is also known as browser polyfills
babel/preset-react: Transform React JSX into regular JavaScript code
babel-loader: Webpack loader helper

2. Install CSS Loaders
`npm install --save-dev css-loader style-loader postcss-loader postcss --save-dev`
CSS-loader: Handle CSS files
style-loader: The style-loader takes CSS and actually inserts it into the page so that the styles are active on the page.
postcss-loader: Will process CSS to work on older browsers

3.Install Image Loaders
`npm install --save-dev file-loader url-loader`
URL-loader: Will load the image files. Url loader depends on file-loader

4.Install Plugins
`npm install --save-dev autoprefixer`
`npm install --save-dev html-webpack-plugin`
autoprefixer: Autoprefixer is a PostCSS plugin which parses your CSS and adds vendor prefixes
HTML-webpack-plugin: The HtmlWebpackPlugin simplifies the creation of HTML files to serve your webpack bundles. This is especially useful for webpack bundles that include a hash in the filename which changes every compilation.

5. Create a basic project structure:
`mkdir -p src`
`touch src/index.html src/index.js src/index.css`

6. Build Configuration for Webpack and Babel
`touch .babelrc`

Add { "presets": ["@babel/preset-env", "@babel/preset-react"] }

7.npm run start

